#include <iostream>
#include <cstdlib>
#include <conio.h>
#include <windows.h>
#include <ctime>
#include <random>
#include <chrono>
#include <fstream>
#include <vector>

using namespace std;
using namespace std::chrono;

mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
int getRandomNumber(int l, int r) {return uniform_int_distribution<int>(l, r)(rng);}

int main()
{
	int ctr = 1;

	cout << "\n_Start...\n\n";

	// User Info
	cout << "***We've considered 1 word as 5 characters\n\n";
	cout << "Type 'e' for Easy"
		 << "\n"
		 << "Type 'm' for Medium"
		 << "\n"
		 << "Type 'h' for Hard"
		 << "\n"
		 << "Type 's' to exit from the game"
		 << "\n\n";

	string e1;
	vector<string> e;
	int numOfLines_e = 0;
	ifstream File_e("Easy.txt");
	while (getline(File_e, e1))
	{
		++numOfLines_e;
		e.push_back(e1);
	}

	string m1;
	vector<string> m;
	int numOfLines_m = 0;
	ifstream File_m("Medium.txt");
	while (getline(File_m, m1))
	{
		++numOfLines_m;
		m.push_back(m1);
	}

	string h1;
	vector<string> h;
	int numOfLines_h = 0;
	ifstream File_h("Hard.txt");
	while (getline(File_h, h1))
	{
		++numOfLines_h;
		h.push_back(h1);
	}

	while (ctr)
	{

		int cnt = 0;
		float scr;

		char st;
		cin >> st;

		switch (st)
		{
		case 'e':
		{
			// random index generator
			int rid = getRandomNumber(0, e.size()-1);

			int l = (int)e[rid].length();

			cout << "\n"
				 << e[rid] << "\n";

			auto start = high_resolution_clock::now();

			for (int i = 0; i < l; i++)
			{
				char c = _getch();

				if (c == e[rid].at(i))
				{
					SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 7);
					cout << c;
				}
				else
				{
					SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 4);
					if (e[rid].at(i) == ' ')
						cout << '|';
					else
						cout << e[rid].at(i);

					cnt++;
				}
			}

			auto stop = high_resolution_clock::now();
			auto duration = duration_cast<seconds>(stop - start);
			float time = (float)duration.count();
			float calc = (l * 60) / (5 * time);

			scr = (((float)l - (float)cnt) / ((float)l)) * (float)100;
			SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 7);

			cout << "\n"
				 << "\n"
				 << "Your Score is  " << scr << "  out of  100"
				 << "\n"
				 << "\n";
			cout << "Your Speed is approx.  " << calc << "  words per minute."
				 << "\n"
				 << "\n";

			break;
		}

		case 'm':
		{
			// random index generator
			int rid = getRandomNumber(0, m.size()-1);

			int l = (int)m[rid].length();

			cout << "\n"
				 << m[rid] << "\n";

			auto start = high_resolution_clock::now();

			for (int i = 0; i < l; i++)
			{
				char c = _getch();

				if (c == m[rid].at(i))
				{
					SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 7);
					cout << c;
				}
				else
				{
					SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 4);
					if (m[rid].at(i) == ' ')
						cout << '|';
					else
						cout << m[rid].at(i);

					cnt++;
				}
			}

			auto stop = high_resolution_clock::now();
			auto duration = duration_cast<seconds>(stop - start);
			float time = (float)duration.count();
			float calc = (l * 60) / (5 * time);

			scr = (((float)l - (float)cnt) / ((float)l)) * (float)100;
			SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 7);

			cout << "\n"
				 << "\n"
				 << "\n"
				 << "Your Score is  " << scr << "  out of  100"
				 << "\n"
				 << "\n";
			cout << "Your Speed is approx.  " << calc << "  words per minute."
				 << "\n"
				 << "\n";

			break;
		}

		case 'h':
		{
			// random index generator
			int rid = getRandomNumber(0, h.size()-1);

			int l = (int)h[rid].length();

			cout << "\n"
				 << h[rid] << "\n";

			auto start = high_resolution_clock::now();

			for (int i = 0; i < l; i++)
			{
				char c = _getch();

				if (c == h[rid].at(i))
				{
					SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 7);
					cout << c;
				}
				else
				{
					SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 4);
					if (h[rid].at(i) == ' ')
						cout << '|';
					else
						cout << h[rid].at(i);

					cnt++;
				}
			}

			auto stop = high_resolution_clock::now();
			auto duration = duration_cast<seconds>(stop - start);
			float time = (float)duration.count();
			float calc = (l * 60) / (5 * time);

			scr = (((float)l - (float)cnt) / ((float)l)) * (float)100;
			SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 7);

			cout << "\n"
				 << "\n"
				 << "\n"
				 << "Your Score is  " << scr << "  out of  100"
				 << "\n"
				 << "\n";
			cout << "Your Speed is approx.  " << calc << "  words per minute."
				 << "\n"
				 << "\n";

			break;
		}

		case 's':
		{
			ctr = 0;
			break;
		}

		default:
		{
			cout << "Wrong Input! Please provide a valid option for the difficulty level"
				 << "\n";
		}
		}
		if (ctr)
			cout << "Go again"
				 << "\n\n";
	}
	cout << "_End...\n";

	return 0;
}
